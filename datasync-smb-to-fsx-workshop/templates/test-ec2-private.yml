# DataSync FSx Workshop
# Original source: https://github.com/aws-samples/aws-datasync-fsx-windows-migration
# - Deploying resources using CloudFormation
# - Creating and managing FSx for Windows File Server shares
# - Using AWS DataSync to copy data from a Windows Server to FSx

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS DataSync to FSx Windows Migration Workshop
Metadata:
  License:
    Description: |
      AWS DataSync - Migrating from SMB to FSx Windows. Original source: https://github.com/aws-samples/aws-datasync-fsx-windows-migration

###################################
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Instance Type
        Parameters:
          - SourceSMBWindowsServerInstanceType
          - DataSyncAgentInstanceType
      # - Label:
      #     default: Security
      #   Parameters:
      #     - InstanceKeyPair
      - Label:
          default: Windows Configuration
        Parameters:
          - domainName
          - netBiosName
          - commonPassword
      - Label:
          default: AMI IDs (do not edit)
        Parameters:
          - SMBWindows2016Ami
          - Windows2019Ami
          - DataSyncAmi
    ParameterLabels:
      # InstanceKeyPair:
      #   default: 'EC2 Key Pair:'
      domainName:
        default: 'Active Directory Domain Name:'
      netBiosName:
        default: 'Domain NetBIOS name:'
      commonPassword:
        default: 'Common password for all users:'
      SMBWindows2016Ami:
        default: 'SMB Windows 2016 AMI'
      Windows2019Ami:
        default: 'Windows 2019 AMI'
      DataSyncAmi:
        default: 'DataSync AMI'
      SourceSMBWindowsServerInstanceType:
        default: 'EC2 instance type for SMB Windows Server and App-Server EC2'
      DataSyncAgentInstanceType:
        default: 'DataSync Agent EC2 instance type'

###################################
Parameters:
  # InstanceKeyPair:
  #   Description: '(NOTE: If you don''t see a key in the list you will need to create
  #     one from the EC2 console in this region)'
  #   Type: AWS::EC2::KeyPair::KeyName
  domainName:
    Default: 'company.lab'
    Type: String
  netBiosName:
    Default: 'COMPANY'
    Type: String
  commonPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the domain Administrator user. MUST be at least 8 characters
      containing AT LEAST ONE letter, number and symbol. Maximum 50 characters length.
    MaxLength: '50'
    MinLength: '8'
    Default: 'PBnjK-3QGq%lB2#45-vbLg#5Q9BfiUfqsR@Gdpy#sojA5'
    # NoEcho: 'true'
    Type: String

  Windows2019Ami:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
  SMBWindows2016Ami:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base'
  DataSyncAmi:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/datasync/ami'

  SourceSMBWindowsServerInstanceType:
    Description: 'SMB Windows Server instance type selection'
    Type: String
    Default: m6a.large
    AllowedValues:
      - t3a.medium
      - t3a.large
      - r6a.large
      - r6a.xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m6a.large
      - m6a.xlarge
      - m6a.2xlarge
      - m6i.large
      - m6i.xlarge
      - m6i.2xlarge

  DataSyncAgentInstanceType:
    Description: 'DataSync Agent instance type selection'
    Type: String
    Default: m6a.xlarge
    AllowedValues:
      - r6a.large
      - r6a.xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m6a.large
      - m6a.xlarge
      - m6a.2xlarge
      - m6i.large
      - m6i.xlarge
      - m6i.2xlarge

###################################
Resources:

  dmVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.11.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: DMW-VPC
      - Key: CostCenter
        Value: Datasync Migration Workshop
        
  dmLBSubnet1: # dmSubnetPublic1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.0.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: 'True'
      Tags:
      - Key: Name
        Value: DMW-LB-Subnet-1
  dmLBSubnet2: # dmSubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: 'True'
      Tags:
      - Key: Name
        Value: DMW-LB-Subnet-2
  dmLBSubnet3: # dmSubnetPublic3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.2.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: 'True'
      Tags:
      - Key: Name
        Value: DMW-LB-Subnet-3
        
  dmEndpointSubnet1: # dmAz1SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.100.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Endpoint-Subnet-1
  dmEndpointSubnet2: # dmAz1SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.101.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Endpoint-Subnet-2
  dmEndpointSubnet3: # dmAz2SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.102.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Endpoint-Subnet-3

  dmAppSubnet1: # dmAz2SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.103.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-App-Subnet-1
  dmAppSubnet2: # dmAz3SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.104.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-App-Subnet-2
  dmAppSubnet3: # dmAz3SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.105.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-App-Subnet-3

  dmDataSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.106.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Data-Subnet-1
  dmDataSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.107.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Data-Subnet-2
  dmDataSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.108.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Data-Subnet-3

  dmIdentitySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.109.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Identity-Subnet-1
  dmIdentitySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.110.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Identity-Subnet-2
  dmIdentitySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'dmVPC'
      CidrBlock: 10.11.111.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: DMW-Identity-Subnet-3

  dmInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: DMW-IGW
  dmAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'dmVPC'
      InternetGatewayId: !Ref 'dmInternetGateway'

  dmRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'dmVPC'
      Tags:
      - Key: Name
        Value: DMW-Internet-RouteTable

  dmSubnetPublicRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmLBSubnet1'
      RouteTableId: !Ref 'dmRouteTable'
  dmSubnetPublicRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmLBSubnet2'
      RouteTableId: !Ref 'dmRouteTable'
  dmSubnetPublicRouteAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmLBSubnet3'
      RouteTableId: !Ref 'dmRouteTable'
  dmRoutetoInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'dmRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'dmInternetGateway'

  dmPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'dmVPC'
      Tags:
      - Key: Name
        Value: DMW-Private-RouteTable
  dmSubnetRouteEndpointSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmEndpointSubnet1'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteEndpointSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmEndpointSubnet2'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteEndpointSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmEndpointSubnet3'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteAppSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmAppSubnet1'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteAppSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmAppSubnet2'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteAppSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmAppSubnet3'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteDataSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmDataSubnet1'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteDataSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmDataSubnet2'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteDataSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmDataSubnet3'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteIdentitySubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmIdentitySubnet1'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteIdentitySubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmIdentitySubnet2'
      RouteTableId: !Ref 'dmPrivateRouteTable'
  dmSubnetRouteIdentitySubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'dmIdentitySubnet3'
      RouteTableId: !Ref 'dmPrivateRouteTable'

### Security Group
  datasyncAgentEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DataSync Agent EC2
      VpcId: !Ref 'dmVPC'
      Tags:
      - Key: Name
        Value: DMW-DATASYNC-AGENT-EC2-SG

  vpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC Interface Endpoint
      VpcId: !Ref 'dmVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '10.11.0.0/16'
          Description: 'HTTPS'
      Tags:
      - Key: Name
        Value: DMW-VPCENDPOINT-SG

  vpcEndpointDataSyncSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DATASYNC VPC Interface Endpoint
      VpcId: !Ref 'dmVPC'
      Tags:
      - Key: Name
        Value: DMW-DATASYNC-VPCENDPOINT-SG

  vpcEndpointDataSyncSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref vpcEndpointDataSyncSecurityGroup
      SourceSecurityGroupId: !Ref datasyncAgentEc2SecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      Description: 'From AGENT EC2 -- For data transfer from the DataSync VM to the AWS service.'

  vpcEndpointDataSyncSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref vpcEndpointDataSyncSecurityGroup
      SourceSecurityGroupId: !Ref datasyncAgentEc2SecurityGroup
      IpProtocol: tcp
      FromPort: '1024'
      ToPort: '1064'
      Description: 'From AGENT EC2 -- For control traffic between the DataSync agent and the AWS service.'

  smbEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SMB EC2 Instance
      VpcId: !Ref 'dmVPC'
      Tags:
      - Key: Name
        Value: DMW-SMB-EC2-SG

  smbEc2SecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref smbEc2SecurityGroup
      SourceSecurityGroupId: !Ref datasyncAgentEc2SecurityGroup
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
      Description: 'Allow SMB from Agent EC2'

  smbEc2SecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref smbEc2SecurityGroup
      SourceSecurityGroupId: !Ref AppServerEC2SecurityGroup
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
      Description: 'Allow SMB from App-Server EC2'

  AppServerEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App-Server EC2 Instance
      VpcId: !Ref 'dmVPC'
      Tags:
      - Key: Name
        Value: DMW-APPSERVER-EC2-SG

  fsxWindowsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FSx Windows FileSystem
      VpcId: !Ref 'dmVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '139'
          ToPort: '139'
          CidrIp: '10.11.0.0/16'
          Description: 'Allow SMB NetBIOS from VPC CIDR'
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: '10.11.0.0/16'
          Description: 'Allow DNS TCP from VPC CIDR'
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: '10.11.0.0/16'
          Description: 'Allow DNS UDP from VPC CIDR'
      Tags:
      - Key: Name
        Value: DMW-FSX-SG

  fsxWindowsSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref fsxWindowsSecurityGroup
      SourceSecurityGroupId: !Ref AppServerEC2SecurityGroup
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
      Description: 'Allow SMB from App-Server EC2'

  fsxWindowsSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref fsxWindowsSecurityGroup
      SourceSecurityGroupId: !Ref locationFsxSecurityGroup
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
      Description: 'Allow SMB from DataSync Task Network Interfaces'

  locationFsxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FSx Windows FileSystem
      VpcId: !Ref 'dmVPC'
      Tags:
      - Key: Name
        Value: DMW-TASK-NIC-SG
      - Key: Role
        Value: Used by DataSync Task Network Interfaces (location fsx)

  locationFsxSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref locationFsxSecurityGroup
      SourceSecurityGroupId: !Ref datasyncAgentEc2SecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      Description: 'DataSync Agent to Task Network Interface - For data transfer from the DataSync VM to the AWS service.'

  # This is needed because the Managed AD service will be our DNS server.
  # dhcpOptions:
  #   Type: AWS::EC2::DHCPOptions
  #   Properties:
  #     DomainName: !Ref domainName
  #     DomainNameServers: !GetAtt adDS.DnsIpAddresses
  #     Tags:
  #     - Key: Name
  #       Value: DMW-DHCPOptions
  #     - Key: CostCenter
  #       Value: Datasync Migration Workshop
  # dhcpOptionsAssociation:
  #   Type: AWS::EC2::VPCDHCPOptionsAssociation
  #   Properties:
  #     DhcpOptionsId: !Ref dhcpOptions
  #     VpcId: !Ref dmVPC

  winInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'winInstanceIamRole'
  winInstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

################### AWS Directory Service - Microsoft AD Active Directory
  # adDS:
  #   Type: AWS::DirectoryService::MicrosoftAD
  #   Properties:
  #     Edition: 'Standard'
  #     Name: !Ref domainName
  #     Password: !Ref commonPassword
  #     ShortName: !Ref netBiosName
  #     VpcSettings:
  #       SubnetIds:
  #         - !Ref dmIdentitySubnet1
  #         - !Ref dmIdentitySubnet2
  #       VpcId: !Ref dmVPC

################## Windows Server as SMB Data Source
  SMBWindowsServer:
    Type: AWS::EC2::Instance
    # DependsOn: dhcpOptionsAssociation
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\disable-ieesc.ps1:
              content: |
                # Disable Internet Explorer Enhanced Security Configuration
                function Disable-IEESC
                {
                    $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
                    Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
                    $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
                    Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
                    Stop-Process -Name Explorer
                    Write-Host "IE Enhanced Security Configuration (ESC) has been disabled." -ForegroundColor Green
                }
                Disable-IEESC
            c:\cfn\joindomain.ps1:
              content: !Sub |
                $adminuser = "${netBiosName}\Admin"
                $adminpassword = ConvertTo-SecureString -AsPlainText "${commonPassword}" -Force
                $cred = New-Object System.Management.Automation.PSCredential -ArgumentList $adminuser,$adminpassword
                Add-Computer -DomainName "${domainName}" -Credential $cred
                Restart-Computer
            c:\cfn\initusersandgroups.ps1:
              content: !Sub |
                Install-WindowsFeature RSAT-AD-PowerShell,RSAT-ADDS-Tools
                Import-Module ActiveDirectory

                $adminuser = "${netBiosName}\Admin"
                $adminpassword = ConvertTo-SecureString -AsPlainText "${commonPassword}" -Force
                $cred = New-Object System.Management.Automation.PSCredential -ArgumentList $adminuser,$adminpassword

                New-ADGroup -Name "Finance" -GroupScope Global -Credential $cred -Server "${domainName}"
                New-ADGroup -Name "HR" -GroupScope Global -Credential $cred -Server "${domainName}"
                New-ADGroup -Name "Legal" -GroupScope Global -Credential $cred -Server "${domainName}"

                New-ADUser -Name "datasync" -SamAccountName "datasync" -UserPrincipalName "datasync@${domainName}" -AccountPassword (ConvertTo-SecureString "${commonPassword}" -AsPlainText -force) -PasswordNeverExpires $true -Enabled $true -Credential $cred -Server "${domainName}"
                Add-ADGroupMember -Identity "AWS Delegated FSx Administrators" -Members "datasync" -Credential $cred -Server "${domainName}"
            c:\cfn\initsharefolder.ps1:
              content: !Sub |
                Install-WindowsFeature File-Services

                # Generate a 128 KB file with random data
                $bytes = 128KB
                [System.Security.Cryptography.RNGCryptoServiceProvider] $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
                $rndbytes = New-Object byte[] $bytes
                $rng.GetBytes($rndbytes)
                $tmpfile = "$($env:TEMP)\test.dat"
                [System.IO.File]::WriteAllBytes($tmpfile, $rndbytes)

                $InheritanceFlag = @([System.Security.AccessControl.InheritanceFlags]::ContainerInherit,[System.Security.AccessControl.InheritanceFlags]::ObjectInherit)
                $NoInheritanceFlag = [System.Security.AccessControl.InheritanceFlags]::None
                $PropagationFlag = [System.Security.AccessControl.PropagationFlags]::None

                $accessSystem = New-Object System.Security.AccessControl.FileSystemAccessRule("SYSTEM","FullControl",$InheritanceFlag,$PropagationFlag,"Allow")
                $accessDA = New-Object System.Security.AccessControl.FileSystemAccessRule("${netBiosName}\AWS Delegated FSx Administrators","FullControl",$InheritanceFlag,$PropagationFlag,"Allow")
                $accessDuInherit = New-Object System.Security.AccessControl.FileSystemAccessRule("Domain Users","Modify",$InheritanceFlag,$PropagationFlag,"Allow")
                $accessDuNoInherit = New-Object System.Security.AccessControl.FileSystemAccessRule("Domain Users","Modify",$NoInheritanceFlag,$PropagationFlag,"Allow")
                $accessLegal = New-Object System.Security.AccessControl.FileSystemAccessRule("${netBiosName}\Legal","Modify",$InheritanceFlag,$PropagationFlag,"Allow")
                $accessHR = New-Object System.Security.AccessControl.FileSystemAccessRule("${netBiosName}\HR","Modify",$InheritanceFlag,$PropagationFlag,"Allow")
                $accessFinance = New-Object System.Security.AccessControl.FileSystemAccessRule("${netBiosName}\Finance","Modify",$InheritanceFlag,$PropagationFlag,"Allow")

                $owner = New-Object System.Security.Principal.NTAccount("${netBiosName}\Admin")
                $group = New-Object System.Security.Principal.NTAccount("${netBiosName}\Domain Users")

                function SetOwnerAndGroup{
                    Param ($obj, $own, $grp)
                    $acl = Get-Acl $obj
                    $acl.SetOwner($own)
                    $acl.SetGroup($grp)
                    $acl | Set-Acl $obj
                }

                new-item c:\share1 -itemtype directory
                $acl = Get-Acl c:\share1
                $acl.SetAccessRuleProtection($True, $False)
                $acl.SetAccessRule($accessSystem)
                $acl.SetAccessRule($accessDA)
                $acl.SetAccessRule($accessDuNoInherit)
                $acl.SetOwner($owner)
                $acl.SetGroup($group)
                $acl | Set-Acl c:\share1

                new-item c:\share1\Legal -itemtype directory
                $acl = Get-Acl c:\share1\Legal
                $acl.SetAccessRule($accessLegal)
                $acl | Set-Acl c:\share1\Legal
                new-item c:\share1\Legal\Compliance -itemtype directory
                copy-item $tmpfile c:\share1\Legal\Compliance\for-review.dat
                SetOwnerAndGroup c:\share1\Legal $owner $group
                SetOwnerAndGroup c:\share1\Legal\Compliance $owner $group
                SetOwnerAndGroup c:\share1\Legal\Compliance\for-review.dat $owner $group

                new-item c:\share1\HR -itemtype directory
                $acl = Get-Acl c:\share1\HR
                $acl.SetAccessRule($accessHR)
                $acl | Set-Acl c:\share1\HR
                new-item c:\share1\HR\Alice -itemtype directory
                copy-item $tmpfile c:\share1\HR\Alice\comp.dat
                SetOwnerAndGroup c:\share1\HR $owner $group
                SetOwnerAndGroup c:\share1\HR\Alice $owner $group
                SetOwnerAndGroup c:\share1\HR\Alice\comp.dat $owner $group

                new-item c:\share1\Finance -itemtype directory
                $acl = Get-Acl c:\share1\Finance
                $acl.SetAccessRule($accessFinance)
                $acl | Set-Acl c:\share1\Finance
                new-item c:\share1\Finance\Budget -itemtype directory
                copy-item $tmpfile c:\share1\Finance\Budget\forecast.dat
                new-item c:\share1\Finance\YearEnd -itemtype directory
                copy-Item $tmpfile c:\share1\Finance\YearEnd\results.dat
                SetOwnerAndGroup c:\share1\Finance $owner $group
                SetOwnerAndGroup C:\share1\Finance\Budget $owner $group
                SetOwnerAndGroup C:\share1\Finance\Budget\forecast.dat $owner $group
                SetOwnerAndGroup C:\share1\Finance\YearEnd $owner $group
                SetOwnerAndGroup C:\share1\Finance\YearEnd\results.dat $owner $group

                new-item c:\share1\Shared -itemtype directory
                $acl = Get-Acl c:\share1\Shared
                $acl.SetAccessRule($accessDuInherit)
                $acl | Set-Acl c:\share1\Shared
                new-item c:\share1\Shared\Programs -itemtype directory
                copy-Item $tmpfile c:\share1\Shared\Programs\anti-virus.exe
                SetOwnerAndGroup c:\share1\Shared $owner $group
                SetOwnerAndGroup c:\share1\Shared\Programs $owner $group
                SetOwnerAndGroup c:\share1\Shared\Programs\anti-virus.exe $owner $group
 
                New-SMBShare -Name "share1" -Path "C:\share1" -FullAccess "Everyone"
          commands:
            # 1-joinDomain:
            #   command: "powershell.exe c:\\cfn\\joindomain.ps1"
            #   waitAfterCompletion: forever
            # 2-initUsersAndGroups:
            #   command: "powershell.exe c:\\cfn\\initusersandgroups.ps1"
            # 3-initShareFolder:
            #   command: "powershell.exe c:\\cfn\\initsharefolder.ps1"
            4-disableIEESC:
              command: "powershell.exe c:\\cfn\\disable-ieesc.ps1"
            5-finishUp:
              command: !Sub "cfn-signal.exe -e 0 --stack ${AWS::StackId} --resource SMBWindowsServer --region ${AWS::Region}"
    Properties:
      ImageId: !Ref SMBWindows2016Ami
      InstanceType: !Ref SourceSMBWindowsServerInstanceType
      # KeyName: !Ref InstanceKeyPair
      IamInstanceProfile: !Ref 'winInstanceProfile'
      Tags:
        - Key: Name
          Value: DMW-SMB-Windows-Server-EC2
        - Key: CostCenter
          Value: Datasync Migration Workshop
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            DeleteOnTermination: 'true'
            VolumeType: gp3
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'smbEc2SecurityGroup'
          SubnetId: !Ref 'dmDataSubnet1'
      UserData:
        Fn::Base64:
          !Sub |
            <powershell>
            $localpasswd = ConvertTo-SecureString "${commonPassword}" -asplaintext -force
            Set-LocalUser -Name Administrator -Password $localpasswd
            Set-LocalUser -Name Admin1 -Password $localpasswd
            cfn-init.exe -v -s ${AWS::StackId} -r SMBWindowsServer --region ${AWS::Region}
            </powershell>

################## FSx for Windows as Target Location
  ### Single-AZ FSX
  # fsxFS:
  #   Type: AWS::FSx::FileSystem
  #   DependsOn: dhcpOptionsAssociation
  #   DeletionPolicy: Delete
  #   Properties:
  #     FileSystemType: WINDOWS
  #     StorageCapacity: 64
  #     SubnetIds:
  #       - !Ref dmDataSubnet2
  #     SecurityGroupIds:
  #       - !Ref fsxWindowsSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: DMW DataSync FSx
  #       - Key: CostCenter
  #         Value: Datasync Migration Workshop
  #     WindowsConfiguration:
  #       ActiveDirectoryId: !Ref adDS
  #       DeploymentType: SINGLE_AZ_1
  #       ThroughputCapacity: 16

  # ### Multi-AZ FSX
  # fsxFS:
  #   Type: AWS::FSx::FileSystem
  #   DependsOn: dhcpOptionsAssociation
  #   Properties:
  #     FileSystemType: WINDOWS
  #     StorageCapacity: 64
  #     SubnetIds:
  #       - !Ref dmDataSubnet2
  #       - !Ref dmDataSubnet3
  #     SecurityGroupIds:
  #       - !Ref fsxWindowsSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: DataSync FSx Workshop
  #     WindowsConfiguration:
  #       ActiveDirectoryId: !Ref adDS
  #       DeploymentType: MULTI_AZ_1
  #       ThroughputCapacity: 16
  #       PreferredSubnetId: !Ref dmAz2SubnetPrivate1 # Required for MULTI_AZ_1

  ################## EC2 App-Server
  AppServerEC2:
    Type: 'AWS::EC2::Instance'
    # DependsOn: dhcpOptionsAssociation
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      SubnetId: !Ref dmAppSubnet1
      ImageId: !Ref Windows2019Ami
      InstanceType: !Ref SourceSMBWindowsServerInstanceType
      IamInstanceProfile: !Ref 'winInstanceProfile'
      SecurityGroupIds: 
        - !GetAtt AppServerEC2SecurityGroup.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            DeleteOnTermination: 'true'
            VolumeType: gp3

      UserData:
        Fn::Base64: !Sub |
          <powershell>
          Set-ExecutionPolicy Unrestricted -Force

          # Set common password
          $localpasswd = ConvertTo-SecureString "${commonPassword}" -asplaintext -force
          Set-LocalUser -Name Administrator -Password $localpasswd
          Set-LocalUser -Name Admin1 -Password $localpasswd

          ###
          # Disable Internet Explorer Enhanced Security Configuration
          function Disable-IEESC
          {
              $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
              Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
              $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
              Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
              Stop-Process -Name Explorer
              Write-Host "IE Enhanced Security Configuration (ESC) has been disabled." -ForegroundColor Green
          }

          Disable-IEESC

          ###
          # # Join Domain
          # $adminuser = "${netBiosName}\Admin"
          # $adminpassword = ConvertTo-SecureString -AsPlainText "${commonPassword}" -Force
          # $cred = New-Object System.Management.Automation.PSCredential -ArgumentList $adminuser,$adminpassword
          # Add-Computer -DomainName "${domainName}" -Credential $cred
          # Restart-Computer
          
          cfn-signal.exe -e 0 --stack ${AWS::StackId} --resource AppServerEC2 --region ${AWS::Region}
          </powershell>
      Tags:
        - Key: Name
          Value: DMW-App-Server-EC2
        - Key: CostCenter
          Value: Datasync Migration Workshop
        - Key: Role
          Value: App Server
        - Key: OS
          Value: Windows

################## DataSync
  # DataSync VPC Endpoint
  dataSyncVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref vpcEndpointDataSyncSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.datasync
      SubnetIds:
        - !Ref dmEndpointSubnet1
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref dmVPC

  # Instance Profile for DataSync Agent
  dataSyncAgentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'dataSyncAgentIamRole'
  dataSyncAgentIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  # dataSyncAgentRolePolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - datasync:*
  #           Resource:
  #             - '*'
  #         - Effect: Allow
  #           Action:
  #             - iam:PassRole
  #           Resource:
  #             - '*'
  #       Version: '2012-10-17'
  #     PolicyName: policy
  #     Roles:
  #       - !Ref 'dataSyncAgentIamRole'

  # DataSync Agent
  dataSyncAgent:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref DataSyncAmi
      InstanceType: !Ref DataSyncAgentInstanceType
      # KeyName: !Ref InstanceKeyPair
      IamInstanceProfile: !Ref 'dataSyncAgentInstanceProfile'
      Tags:
        - Key: Name
          Value: DMW-DataSyncAgent-EC2
        - Key: CostCenter
          Value: Datasync Migration Workshop
      InstanceInitiatedShutdownBehavior: stop
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '80'
            DeleteOnTermination: 'true'
            VolumeType: gp3
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'datasyncAgentEc2SecurityGroup'
          SubnetId: !Ref 'dmAppSubnet2'

  WorkshopDataSyncLogs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - DataSync-Logs
      Tags:
      - Key: Name
        Value: DMW-DataSyncLogs
      - Key: CostCenter
        Value: Datasync Migration Workshop

###################################
  # VPC Endpoint for Secrets Manager
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref vpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds:
        - !Ref dmEndpointSubnet1
        - !Ref dmEndpointSubnet2
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref dmVPC

  DMSourceLocationUserSecret:
    Type: 'AWS::SecretsManager::Secret'
    DeletionPolicy: Delete
    Properties:
      Description: SourceLocation User credentials
      Name: DMSourceLocationUserSecret
      SecretString: !Sub '{"username":"datasync","password":"${commonPassword}","domain":"${domainName}"}'
      Tags:
        - Key: Name
          Value: DMSourceLocationUserSecret
        - Key: Owner
          Value: DataSync Workshop
        - Key: CostCenter
          Value: Datasync Migration Workshop

  DMDestinationLocationUserSecret:
    Type: 'AWS::SecretsManager::Secret'
    DeletionPolicy: Delete
    Properties:
      Description: DestinationLocation User credentials
      Name: DMDestinationLocationUserSecret
      SecretString: !Sub '{"username":"datasync","password":"${commonPassword}","domain":"${domainName}"}'
      Tags:
        - Key: Name
          Value: DMDestinationLocationUserSecret
        - Key: Owner
          Value: DataSync Workshop
        - Key: CostCenter
          Value: Datasync Migration Workshop

###################################
  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Gateway'
      VpcId: !Ref dmVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref dmPrivateRouteTable

  cloudformationVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref vpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.cloudformation
      SubnetIds:
        - !Ref dmEndpointSubnet1
        - !Ref dmEndpointSubnet2
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref dmVPC

  # VPC Endpoint for Fleet Manager
  # 1 ssm
  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref vpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds:
        - !Ref dmEndpointSubnet2
        - !Ref dmEndpointSubnet3
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref dmVPC

  # 2 ssmmessages
  SSMMessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref vpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds:
        - !Ref dmEndpointSubnet2
        - !Ref dmEndpointSubnet3
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref dmVPC

  # 3 ec2messages
  Ec2MessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref vpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds:
        - !Ref dmEndpointSubnet2
        - !Ref dmEndpointSubnet3
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref dmVPC

###################################
Outputs:
  vpcID:
    Description: DataSync Workshop VPC ID
    Value: !Ref dmVPC
    Export:
      Name: datasync-workshop-vpcid

  domainName:
    Description: Active Directory domain name
    Value: !Ref domainName
    Export:
      Name: datasync-workshop-datasync-domain-name

  netBiosName:
    Description: NetBIOS name for domain
    Value: !Ref netBiosName
  commonPassword:
    Description:  Password used for all domain users
    Value: !Ref commonPassword

  SMBWindowsServerPrivateIP:
    Description: Windows Server Private IP Address
    Value: !GetAtt SMBWindowsServer.PrivateIp
    Export:
      Name: datasync-workshop-smb-windows-server-private-ip

  # SMBWindowsServerPublicIP:
  #   Description: Windows Server Public IP Address
  #   Value: !GetAtt SMBWindowsServer.PublicIp

  dataSyncAgentPrivateIP:
    Description: DataSync Agent Private IP Address
    Value: !GetAtt dataSyncAgent.PrivateIp
  # dataSyncAgentPublicIP:
  #   Description: DataSync Agent Public IP Address
  #   Value: !GetAtt dataSyncAgent.PublicIp

  DataSyncWorkshopSubnetForVpcEndpoint:
    Description: DataSync Workshop Subnet used by VPC Interface Endpoint
    Value: !Ref dmEndpointSubnet1
    Export:
      Name: datasync-workshop-datasync-private-subnet

  dataSyncVpcEndpointId:
    Description: DataSync VPC Endpoint Interface
    Value: !Ref dataSyncVpcEndpoint
    Export:
      Name: datasync-workshop-datasync-vpc-endpoint

  # fsxFSId:
  #   Description: FSx For Windows
  #   Value: !Ref fsxFS
  #   Export:
  #     Name: datasync-workshop-fsx-id

  # fsxFSArn:
  #   Description: FSx For Windows Server ARN
  #   Value: !GetAtt fsxFS.ResourceARN
  #   Export:
  #     Name: datasync-workshop-fsx-arn

  vpcEndpointSecurityGroup:
    Description: Security Group for VPC Interface Endpoint
    Value: !Ref vpcEndpointSecurityGroup
    Export:
      Name: datasync-workshop-vpcendpoint-security-group

  vpcEndpointDataSyncSecurityGroup:
    Description: Security Group for DATASYNC VPC Interface Endpoint
    Value: !Ref vpcEndpointDataSyncSecurityGroup
    Export:
      Name: datasync-workshop-datasync-vpcendpoint-security-group

  smbEc2SecurityGroup:
    Description: Security Group for SMB EC2 Instance
    Value: !Ref smbEc2SecurityGroup
    Export:
      Name: datasync-workshop-smb-ec2-security-group

  datasyncAgentEc2SecurityGroup:
    Description: Security Group for DATASYNC AGENT EC2 Instance
    Value: !Ref datasyncAgentEc2SecurityGroup
    Export:
      Name: datasync-workshop-datasync-agent-ec2-security-group

  fsxWindowsSecurityGroup:
    Description: Security Group for FSx for Windows FileSystem
    Value: !Ref fsxWindowsSecurityGroup
    Export:
      Name: datasync-workshop-fsx-windows-security-group

  locationfsxWindowsSecurityGroup:
    Description: Security Group for Location FSx / Task Network Interfaces
    Value: !Ref locationFsxSecurityGroup
    Export:
      Name: datasync-workshop-location-fsx-windows-security-group

  # DataSyncWorkshopSecurityGroup:
  #   Description: Security Group for DATASYNC Workshop
  #   Value: !Ref dmSecurityGroup
  #   Export:
  #     Name: datasync-workshop-security-group
